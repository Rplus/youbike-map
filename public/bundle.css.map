{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\tlet name = 'world';\n  let range = 500;\n  let location = null;\n  let points = [];\n  $: recentPoints = getRecentPoints(points, range, location);\n  const KEY = 'AIzaSyCjDnDGv67nvhzBsLRYAwTbiF1HrZBQDUM';\n\n  $: currentPosMarker = location ? `&markers=${location.lat},${location.lng}` : undefined;\n\n  const locateOption = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0\n  };\n\n  function getLocation () {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject, locateOption);\n    });\n  };\n\n  async function setLocate() {\n    let position = await getLocation();\n    location = {\n      lat: position.coords.latitude,\n      lng: position.coords.longitude,\n      acc: position.coords.accuracy,\n    };\n    console.log('setLocate', location);\n  }\n\n  async function fetchData() {\n    setLocate();\n\n    console.log('fetchData');\n    const res = await fetch('https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json').then(d => d.json())\n    console.log('fetchData done', res);\n    points = Object.values(res.retVal);\n  };\n\n  function getRecentPoints(points, range, location) {\n    console.log('getRecentPoints');\n    points = points.map(p => {\n      p.img = getImgSrc(p);\n      return p;\n    });\n\n    if (location) {\n      points = points.filter(p => {\n        const distance = GreatCircleDistance([\n          location.lng,\n          location.lat,\n          p.lng,\n          p.lat\n        ]);\n        p.distance = distance.toFixed();\n        return distance < range;\n      })\n    }\n\n    return points.sort((a, b) => a.distance - b.distance);\n  }\n\n  // https://en.wikipedia.org/wiki/Great-circle_distance\n  // https://gist.github.com/thesadabc/f84adeea5644149539dae968ccdb3f2c\n  function GreatCircleDistance(points) {\n    let [lng1, lat1, lng2, lat2] = points;\n    if (!lng1 || !lat1 || !lng2 || !lat2) return null;\n    [lng1, lat1, lng2, lat2] = points.map(n => n * Math.PI / 180)\n    const R = 6371000; // average earth radius(m)\n    const C = Math.sin(lat1) * Math.sin(lat2) +\n      Math.cos(lng1 - lng2) * Math.cos(lat1) * Math.cos(lat2);\n    return R * Math.acos(C);\n  }\n\n  function getImgSrc(\n    target,\n    size = 300,\n  ) {\n    let p0 = target;\n    let p1;\n\n    if (location) {\n      p0 = location;\n      p1 = target;\n    }\n\n    return (\n      'https://maps.googleapis.com/maps/api/staticmap'\n      + `?size=${size}x${size}`\n      + `&center=${p0.lat},${p0.lng}`\n      + `&markers=size:mid|${p0.lat},${p0.lng}`\n      + (p1 ? `&markers=color:yellow|label:T|${p1.lat},${p1.lng}` : '')\n      + `&key=${KEY}`\n    );\n  }\n\n  fetchData();\n</script>\n\n\n\n<!--  -->\n\n\n\n<nav class=\"ctrl\">\n  <button id=\"locate\" on:click={setLocate}>Locate</button>\n  <button id=\"refetch\" on:click={fetchData}>Refetch</button>\n  <input type=\"range\" id=\"range\" bind:value={range} max=\"5000\" min=\"10\" />\n  <span>Range: {range}m</span>\n</nav>\n\n<ol class=\"list\">\n  {#each recentPoints as point (point.sno)}\n    <li class=\"item\" value={point.sno}>\n      <div class=\"d-f\">\n        <div>\n          車：{point.sbi}\n          <br>\n          位：{point.bemp}\n          <hr>\n          <small>共：{point.tot}</small>\n        </div>\n\n        <div class=\"item-info\">\n          {point.sna}\n          <br>\n          &nbsp;&nbsp;&nbsp;&nbsp;{point.distance} m\n          <br>\n          <br>\n          <details>\n            <a href=\"http://maps.google.com?q={point.lat},{point.lng}\" target=\"_blank\" title=\"google map link\">{point.lat}, {point.lng}\n            </a>\n            <a class=\"img\" style=\"--url: url({point.img})\" href={point.img} target=\"_blank\">{point.img}</a>\n          </details>\n\n        </div>\n\n      </div>\n    </li>\n  {/each}\n</ol>\n\n\n\n<!--  -->\n\n\n\n<style>\n  .ctrl {\n    position: fixed;\n    top: 0;\n    height: 2em;\n    display: flex;\n    align-items: center;\n  }\n\n  .list {\n    padding-top: 2em;\n  }\n\n  .data-number {\n    display: inline-block;\n    width: 100px;\n    text-align: center;\n  }\n\n  .item {\n    margin-bottom: 1.5em;\n  }\n\n  .item-info {\n    margin-left: 2em;\n    font-size: smaller;\n  }\n\n  .img {\n    display: block;\n    width: 300px;\n    height: 300px;\n    word-break: break-all;\n    color: transparent;\n  }\n\n  :global(details[open]) .img {\n    background-color: #cfc;\n    background-image: var(--url);\n  }\n\n  .sr-only {\n    position: absolute !important;\n    width: 1px !important;\n    height: 1px !important;\n    padding: 0 !important;\n    margin: -1px !important;\n    overflow: hidden !important;\n    clip: rect(0, 0, 0, 0) !important;\n    white-space: nowrap !important;\n    border: 0 !important;\n  }\n\n  .d-f {\n    display: flex;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAwJE,KAAK,cAAC,CAAC,AACL,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,WAAW,CAAE,GAAG,AAClB,CAAC,AAQD,KAAK,cAAC,CAAC,AACL,aAAa,CAAE,KAAK,AACtB,CAAC,AAED,UAAU,cAAC,CAAC,AACV,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,OAAO,AACpB,CAAC,AAED,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,SAAS,CACrB,KAAK,CAAE,WAAW,AACpB,CAAC,AAEO,aAAa,AAAC,CAAC,IAAI,cAAC,CAAC,AAC3B,gBAAgB,CAAE,IAAI,CACtB,gBAAgB,CAAE,IAAI,KAAK,CAAC,AAC9B,CAAC,AAcD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC"
}